// File: MainActivity.kt
package com.example.decisionhelper

import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.view.View
import android.view.animation.AnimationUtils
import android.widget.ArrayAdapter
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.lifecycle.ViewModelProvider
import com.example.decisionhelper.databinding.ActivityMainBinding
import com.example.decisionhelper.models.Decision
import com.example.decisionhelper.models.Option
import com.example.decisionhelper.viewmodels.DecisionViewModel
import com.google.android.material.tabs.TabLayout
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import kotlin.random.Random

class MainActivity : AppCompatActivity() {
    
    private lateinit var binding: ActivityMainBinding
    private lateinit var viewModel: DecisionViewModel
    private var options = mutableListOf<Option>()
    private var criteria = mutableListOf<String>()
    private lateinit var optionsAdapter: ArrayAdapter<String>
    private lateinit var criteriaAdapter: ArrayAdapter<String>
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        
        viewModel = ViewModelProvider(this)[DecisionViewModel::class.java]
        
        setupUI()
        setupObservers()
        setupListeners()
    }
    
    private fun setupUI() {
        // Setup adapters
        optionsAdapter = ArrayAdapter(this, android.R.layout.simple_list_item_1, mutableListOf<String>())
        criteriaAdapter = ArrayAdapter(this, android.R.layout.simple_list_item_1, mutableListOf<String>())
        
        binding.optionsList.adapter = optionsAdapter
        binding.criteriaList.adapter = criteriaAdapter
        
        // Setup tabs
        binding.tabLayout.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {
            override fun onTabSelected(tab: TabLayout.Tab?) {
                when (tab?.position) {
                    0 -> showDecideTab()
                    1 -> showHistoryTab()
                    2 -> showSavedTab()
                }
            }
            override fun onTabUnselected(tab: TabLayout.Tab?) {}
            override fun onTabReselected(tab: TabLayout.Tab?) {}
        })
        
        // Default to Decide tab
        showDecideTab()
        
        // Set default mood
        binding.moodNeutral.isChecked = true
    }
    
    private fun setupObservers() {
        viewModel.historyLiveData.observe(this) { decisions ->
            updateHistoryList(decisions)
        }
        
        viewModel.savedLiveData.observe(this) { decisions ->
            updateSavedList(decisions)
        }
    }
    
    private fun setupListeners() {
        // Add option button
        binding.addOptionButton.setOnClickListener {
            val optionText = binding.optionInput.text.toString().trim()
            if (optionText.isNotEmpty()) {
                options.add(Option(optionText, Date().time))
                optionsAdapter.add(optionText)
                optionsAdapter.notifyDataSetChanged()
                binding.optionInput.text.clear()
                
                // Apply animation to the list
                val animation = AnimationUtils.loadAnimation(this, R.anim.item_animation_from_right)
                binding.optionsList.startAnimation(animation)
            }
        }
        
        // Add criterion button
        binding.addCriterionButton.setOnClickListener {
            val criterionText = binding.criterionInput.text.toString().trim()
            if (criterionText.isNotEmpty()) {
                criteria.add(criterionText)
                criteriaAdapter.add(criterionText)
                criteriaAdapter.notifyDataSetChanged()
                binding.criterionInput.text.clear()
            }
        }
        
        // Make decision button
        binding.decideButton.setOnClickListener {
            if (options.size < 2) {
                Toast.makeText(this, "Please add at least two options!", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            
            makeDecision()
        }
        
        // Clear button
        binding.clearButton.setOnClickListener {
            clearForm()
        }
        
        // Save decision button
        binding.saveDecisionButton.setOnClickListener {
            viewModel.currentDecision?.let {
                viewModel.saveDecision(it)
                Toast.makeText(this, "Decision saved!", Toast.LENGTH_SHORT).show()
            }
        }
        
        // Remove options on long click
        binding.optionsList.setOnItemLongClickListener { _, _, position, _ ->
            options.removeAt(position)
            optionsAdapter.remove(optionsAdapter.getItem(position))
            optionsAdapter.notifyDataSetChanged()
            true
        }
        
        // Remove criteria on long click
        binding.criteriaList.setOnItemLongClickListener { _, _, position, _ ->
            criteria.removeAt(position)
            criteriaAdapter.remove(criteriaAdapter.getItem(position))
            criteriaAdapter.notifyDataSetChanged()
            true
        }
        
        // Theme buttons
        binding.themeBlue.setOnClickListener { setTheme("blue") }
        binding.themePurple.setOnClickListener { setTheme("purple") }
        binding.themeGreen.setOnClickListener { setTheme("green") }
        binding.themeOrange.setOnClickListener { setTheme("orange") }
    }
    
    private fun showDecideTab() {
        binding.decideLayout.visibility = View.VISIBLE
        binding.historyLayout.visibility = View.GONE
        binding.savedLayout.visibility = View.GONE
    }
    
    private fun showHistoryTab() {
        binding.decideLayout.visibility = View.GONE
        binding.historyLayout.visibility = View.VISIBLE
        binding.savedLayout.visibility = View.GONE
        
        // Refresh the history list
        viewModel.loadHistory()
    }
    
    private fun showSavedTab() {
        binding.decideLayout.visibility = View.GONE
        binding.historyLayout.visibility = View.GONE
        binding.savedLayout.visibility = View.VISIBLE
        
        // Refresh the saved list
        viewModel.loadSaved()
    }
    
    private fun makeDecision() {
        binding.loadingIndicator.visibility = View.VISIBLE
        binding.decideButton.isEnabled = false
        binding.resultCard.visibility = View.GONE
        
        // Get the importance level
        val importance = binding.importanceSlider.progress
        
        // Calculate thinking time based on importance (1-10 scale)
        val thinkingTime = 1000L + (importance * 200L)
        
        // Get selected mood
        val mood = when {
            binding.moodCautious.isChecked -> "cautious"
            binding.moodConfident.isChecked -> "confident"
            else -> "neutral"
        }
        
        Handler(Looper.getMainLooper()).postDelayed({
            // Select a random option
            val selectedOption = options[Random.nextInt(options.size)]
            
            // Generate reasoning
            val reasoning = generateReasoning(selectedOption, mood, importance)
            
            // Create decision object
            val currentDecision = Decision(
                id = Date().time,
                date = SimpleDateFormat("MMM dd, yyyy HH:mm", Locale.getDefault()).format(Date()),
                options = ArrayList(options),
                result = selectedOption,
                reasoning = reasoning,
                mood = mood,
                importance = importance
            )
            
            // Save to view model and history
            viewModel.currentDecision = currentDecision
            viewModel.addToHistory(currentDecision)
            
            // Update UI
            binding.resultText.text = selectedOption.text
            binding.reasoningText.text = reasoning
            binding.resultCard.visibility = View.VISIBLE
            binding.resultCard.startAnimation(AnimationUtils.loadAnimation(this, R.anim.slide_in_up))
            
            // Show confetti animation
            showConfetti()
            
            // Hide loading indicator and re-enable decide button
            binding.loadingIndicator.visibility = View.GONE
            binding.decideButton.isEnabled = true
            
        }, thinkingTime)
    }
    
    private fun generateReasoning(selectedOption: Option, mood: String, importance: Int): String {
        // Generate reasoning based on mood, criteria, and importance
        val confidenceLevel = when (mood) {
            "confident" -> "confidently"
            "cautious" -> "carefully"
            else -> "thoughtfully"
        }
        
        val importanceText = when {
            importance > 7 -> "This important decision"
            importance > 3 -> "This decision"
            else -> "This choice"
        }
        
        val intro = "$importanceText leads to \"${selectedOption.text}\". I $confidenceLevel selected this option because "
        
        return if (criteria.isNotEmpty()) {
            // Use criteria for reasoning
            val randomCriteria = criteria.random()
            val phrases = listOf(
                "it best satisfies the \"$randomCriteria\" factor you mentioned.",
                "when considering \"$randomCriteria\", this option clearly stands out.",
                "based on \"$randomCriteria\", this is your optimal choice right now."
            )
            intro + phrases.random()
        } else {
            // Generic reasoning without criteria
            val phrases = listOf(
                "it aligns perfectly with your current situation.",
                "it provides the best balance of potential benefits.",
                "it presents the most interesting opportunity.",
                "sometimes the unexpected choice leads to the best outcomes.",
                "it feels right for your situation right now.",
                "making this choice now will save you time overthinking."
            )
            intro + phrases.random()
        }
    }
    
    private fun showConfetti() {
        // In a real app, you would implement an actual confetti animation here
        Toast.makeText(this, "🎉 Decision made! 🎉", Toast.LENGTH_SHORT).show()
    }
    
    private fun clearForm() {
        // Clear options
        options.clear()
        optionsAdapter.clear()
        optionsAdapter.notifyDataSetChanged()
        
        // Clear criteria
        criteria.clear()
        criteriaAdapter.clear()
        criteriaAdapter.notifyDataSetChanged()
        
        // Reset UI elements
        binding.moodNeutral.isChecked = true
        binding.importanceSlider.progress = 5
        binding.resultCard.visibility = View.GONE
        
        // Clear current decision
        viewModel.currentDecision = null
    }
    
    private fun updateHistoryList(decisions: List<Decision>) {
        // Clear the container first
        binding.historyContainer.removeAllViews()
        
        if (decisions.isEmpty()) {
            // Show empty state
            val emptyView = layoutInflater.inflate(R.layout.item_empty_state, binding.historyContainer, false)
            binding.historyContainer.addView(emptyView)
        } else {
            // Add decision items
            for (decision in decisions) {
                val itemView = layoutInflater.inflate(R.layout.item_decision, binding.historyContainer, false)
                // Set the decision data to the view
                // In a real app, you would use findViewById to get the views and set their values
                binding.historyContainer.addView(itemView)
            }
        }
    }
    
    private fun updateSavedList(decisions: List<Decision>) {
        // Clear the container first
        binding.savedContainer.removeAllViews()
        
        if (decisions.isEmpty()) {
            // Show empty state
            val emptyView = layoutInflater.inflate(R.layout.item_empty_state, binding.savedContainer, false)
            binding.savedContainer.addView(emptyView)
        } else {
            // Add decision items
            for (decision in decisions) {
                val itemView = layoutInflater.inflate(R.layout.item_decision, binding.savedContainer, false)
                // Set the decision data to the view
                // In a real app, you would use findViewById to get the views and set their values
                binding.savedContainer.addView(itemView)
            }
        }
    }
    
    private fun setTheme(theme: String) {
        // Store the selected theme in preferences
        getPreferences(MODE_PRIVATE).edit().putString("app_theme", theme).apply()
        
        // Update UI colors based on theme
        val primaryColor = when (theme) {
            "purple" -> R.color.purple_500
            "green" -> R.color.green_500
            "orange" -> R.color.orange_500
            else -> R.color.blue_500
        }
        
        // Apply the theme color to UI elements
        val color = ContextCompat.getColor(this, primaryColor)
        binding.decideButton.setBackgroundColor(color)
        // In a real app, you would update all themed elements
    }
}

// File: DecisionViewModel.kt
package com.example.decisionhelper.viewmodels

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import com.example.decisionhelper.models.Decision
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken

class DecisionViewModel(application: Application) : AndroidViewModel(application) {
    
    private val sharedPreferences = application.getSharedPreferences("decisions_prefs", Application.MODE_PRIVATE)
    private val gson = Gson()
    
    private val _historyLiveData = MutableLiveData<List<Decision>>()
    val historyLiveData: LiveData<List<Decision>> get() = _historyLiveData
    
    private val _savedLiveData = MutableLiveData<List<Decision>>()
    val savedLiveData: LiveData<List<Decision>> get() = _savedLiveData
    
    var currentDecision: Decision? = null
    
    init {
        loadHistory()
        loadSaved()
    }
    
    fun loadHistory() {
        val historyJson = sharedPreferences.getString("history", "[]")
        val type = object : TypeToken<List<Decision>>() {}.type
        val decisions = gson.fromJson<List<Decision>>(historyJson, type) ?: emptyList()
        _historyLiveData.value = decisions
    }
    
    fun loadSaved() {
        val savedJson = sharedPreferences.getString("saved", "[]")
        val type = object : TypeToken<List<Decision>>() {}.type
        val decisions = gson.fromJson<List<Decision>>(savedJson, type) ?: emptyList()
        _savedLiveData.value = decisions
    }
    
    fun addToHistory(decision: Decision) {
        val currentHistory = _historyLiveData.value?.toMutableList() ?: mutableListOf()
        // Limit history to 20 items
        if (currentHistory.size >= 20) {
            currentHistory.removeAt(currentHistory.lastIndex)
        }
        currentHistory.add(0, decision)
        _historyLiveData.value = currentHistory
        
        // Save to shared preferences
        val historyJson = gson.toJson(currentHistory)
        sharedPreferences.edit().putString("history", historyJson).apply()
    }
    
    fun saveDecision(decision: Decision) {
        val currentSaved = _savedLiveData.value?.toMutableList() ?: mutableListOf()
        currentSaved.add(0, decision)
        _savedLiveData.value = currentSaved
        
        // Save to shared preferences
        val savedJson = gson.toJson(currentSaved)
        sharedPreferences.edit().putString("saved", savedJson).apply()
    }
    
    fun deleteSavedDecision(id: Long) {
        val currentSaved = _savedLiveData.value?.toMutableList() ?: mutableListOf()
        currentSaved.removeAll { it.id == id }
        _savedLiveData.value = currentSaved
        
        // Save to shared preferences
        val savedJson = gson.toJson(currentSaved)
        sharedPreferences.edit().putString("saved", savedJson).apply()
    }
    
    fun clearHistory() {
        _historyLiveData.value = emptyList()
        sharedPreferences.edit().putString("history", "[]").apply()
    }
}

// File: Option.kt
package com.example.decisionhelper.models

data class Option(
    val text: String,
    val id: Long
)

// File: Decision.kt
package com.example.decisionhelper.models

import java.util.ArrayList

data class Decision(
    val id: Long,
    val date: String,
    val options: ArrayList<Option>,
    val result: Option,
    val reasoning: String,
    val mood: String,
    val importance: Int
)

// File: activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    android:background="@color/background"
    tools:context=".MainActivity">

    <TextView
        android:id="@+id/titleText"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Decision Helper"
        android:textSize="24sp"
        android:textStyle="bold"
        android:textColor="@color/primary"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <LinearLayout
        android:id="@+id/themeButtons"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="parent">

        <Button
            android:id="@+id/themeBlue"
            android:layout_width="24dp"
            android:layout_height="24dp"
            android:background="@drawable/circle_blue"
            android:layout_marginEnd="8dp" />

        <Button
            android:id="@+id/themePurple"
            android:layout_width="24dp"
            android:layout_height="24dp"
            android:background="@drawable/circle_purple"
            android:layout_marginEnd="8dp" />

        <Button
            android:id="@+id/themeGreen"
            android:layout_width="24dp"
            android:layout_height="24dp"
            android:background="@drawable/circle_green"
            android:layout_marginEnd="8dp" />

        <Button
            android:id="@+id/themeOrange"
            android:layout_width="24dp"
            android:layout_height="24dp"
            android:background="@drawable/circle_orange" />
    </LinearLayout>

    <com.google.android.material.tabs.TabLayout
        android:id="@+id/tabLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        app:layout_constraintTop_toBottomOf="@id/titleText"
        app:tabTextColor="@color/text_secondary"
        app:tabSelectedTextColor="@color/primary"
        app:tabIndicatorColor="@color/primary">

        <com.google.android.material.tabs.TabItem
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Decide" />

        <com.google.android.material.tabs.TabItem
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="History" />

        <com.google.android.material.tabs.TabItem
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Saved" />
    </com.google.android.material.tabs.TabLayout>

    <!-- Decide Tab Content -->
    <ScrollView
        android:id="@+id/decideLayout"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_marginTop="8dp"
        app:layout_constraintTop_toBottomOf="@id/tabLayout"
        app:layout_constraintBottom_toBottomOf="parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="Decision Mood"
                android:textSize="18sp"
                android:textStyle="bold"
                android:textColor="@color/primary"
                android:layout_marginTop="16dp"
                android:layout_marginBottom="8dp" />

            <RadioGroup
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal">

                <RadioButton
                    android:id="@+id/moodCautious"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="Cautious" />

                <RadioButton
                    android:id="@+id/moodNeutral"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="Neutral" />

                <RadioButton
                    android:id="@+id/moodConfident"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="Confident" />
            </RadioGroup>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="Importance Level"
                android:textSize="18sp"
                android:textStyle="bold"
                android:textColor="@color/primary"
                android:layout_marginTop="16dp"
                android:layout_marginBottom="8dp" />

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal"
                android:gravity="center_vertical">

                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Low"
                    android:textSize="12sp" />

                <SeekBar
                    android:id="@+id/importanceSlider"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:max="10"
                    android:progress="5"
                    android:layout_marginStart="8dp"
                    android:layout_marginEnd="8dp" />

                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="High"
                    android:textSize="12sp" />
            </LinearLayout>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="Your Options"
                android:textSize="18sp"
                android:textStyle="bold"
                android:textColor="@color/primary"
                android:layout_marginTop="16dp"
                android:layout_marginBottom="8dp" />

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal">

                <EditText
                    android:id="@+id/optionInput"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:hint="Add an option..."
                    android:padding="12dp"
                    android:background="@drawable/edit_text_background" />

                <Button
                    android:id="@+id/addOptionButton"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Add"
                    android:textColor="@color/white"
                    android:background="@color/primary"
                    android:layout_marginStart="8dp" />
            </LinearLayout>

            <ListView
                android:id="@+id/optionsList"
                android:layout_width="match_parent"
                android:layout_height="120dp"
                android:layout_marginTop="8dp"
                android:background="@drawable/list_background" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="Decision Criteria (Optional)"
                android:textSize="18sp"
                android:textStyle="bold"
                android:textColor="@color/primary"
                android:layout_marginTop="16dp"
                android:layout_marginBottom="8dp" />

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal">

                <EditText
                    android:id="@+id/criterionInput"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:hint="Add a criterion..."
                    android:padding="12dp"
                    android:background="@drawable/edit_text_background" />

                <Button
                    android:id="@+id/addCriterionButton"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Add"
                    android:textColor="@color/white"
                    android:background="@color/secondary"
                    android:layout_marginStart="8dp" />
            </LinearLayout>

            <ListView
                android:id="@+id/criteriaList"
                android:layout_width="match_parent"
                android:layout_height="120dp"
                android:layout_marginTop="8dp"
                android:background="@drawable/list_background" />

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal"
                android:layout_marginTop="16dp">

                <Button
                    android:id="@+id/decideButton"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="2"
                    android:text="Make Decision"
                    android:textColor="@color/white"
                    android:background="@drawable/button_primary"
                    android:padding="12dp" />

                <Button
                    android:id="@+id/clearButton"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="Clear All"
                    android:textColor="@color/text_primary"
                    android:background="@drawable/button_secondary"
                    android:layout_marginStart="8dp"
                    android:padding="12dp" />
            </LinearLayout>

            <ProgressBar
                android:id="@+id/loadingIndicator"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="center"
                android:layout_marginTop="16dp"
                android:visibility="gone" />

            <androidx.cardview.widget.CardView
                android:id="@+id/resultCard"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginTop="16dp"
                app:cardCornerRadius="8dp"
                app:cardElevation="4dp"
                android:visibility="gone">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="Decision Made!"
                        android:textSize="20sp"
                        android:textStyle="bold"
                        android:gravity="center"
                        android:layout_marginBottom="8dp" />

                    <TextView
                        android:id="@+id/resultText"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="Result"
                        android:textSize="24sp"
                        android:textStyle="bold"
                        android:textColor="@color/primary"
                        android:gravity="center"
                        android:layout_marginBottom="12dp" />

                    <TextView
                        android:id="@+id/reasoningText"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="Reasoning will appear here..."
                        android:textStyle="italic"
                        android:textColor="@color/text_secondary"
                        android:layout_marginBottom="16dp" />

                    <Button
                        android:id="@+id/saveDecisionButton"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="Save This Decision"
                        android:textColor="@color/white"
                        android:background="@color/accent" />
                </LinearLayout>
            </androidx.cardview.widget.CardView>
        </LinearLayout>
    </ScrollView>

    <!-- History Tab Content -->
    <ScrollView
        android:id="@+id/historyLayout"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_marginTop="8dp"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@id/tabLayout"
        app:layout_constraintBottom_toBottomOf="parent">

        <LinearLayout
            android:id="@+id/historyContainer"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical" />
    </ScrollView>

    <!-- Saved Tab Content -->
    <ScrollView
        android:id="@+id/savedLayout"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_marginTop="8dp"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@id/tabLayout"
        app:layout_constraintBottom_toBottomOf="parent">

        <LinearLayout
            android:id="@+id/savedContainer"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical" />
    </ScrollView>
</androidx.constraintlayout.widget.ConstraintLayout>

// File:
