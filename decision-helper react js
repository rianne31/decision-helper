import React, { useState, useEffect } from 'react';

const DecisionHelper = () => {
  const [options, setOptions] = useState([]);
  const [newOption, setNewOption] = useState('');
  const [result, setResult] = useState(null);
  const [reasoning, setReasoning] = useState('');
  const [savedDecisions, setSavedDecisions] = useState([]);
  const [mood, setMood] = useState('neutral'); // neutral, confident, cautious
  const [criteria, setCriteria] = useState([]);
  const [newCriterion, setNewCriterion] = useState('');
  const [decisionHistory, setDecisionHistory] = useState([]);
  const [loading, setLoading] = useState(false);

  // Load saved data from local storage
  useEffect(() => {
    const storedDecisions = localStorage.getItem('savedDecisions');
    if (storedDecisions) setSavedDecisions(JSON.parse(storedDecisions));
    
    const storedHistory = localStorage.getItem('decisionHistory');
    if (storedHistory) setDecisionHistory(JSON.parse(storedHistory));
  }, []);

  const addOption = () => {
    if (newOption.trim() !== '') {
      setOptions([...options, newOption.trim()]);
      setNewOption('');
    }
  };

  const removeOption = (index) => {
    const newOptions = [...options];
    newOptions.splice(index, 1);
    setOptions(newOptions);
  };

  const addCriterion = () => {
    if (newCriterion.trim() !== '') {
      setCriteria([...criteria, newCriterion.trim()]);
      setNewCriterion('');
    }
  };

  const removeCriterion = (index) => {
    const newCriteria = [...criteria];
    newCriteria.splice(index, 1);
    setCriteria(newCriteria);
  };

  const generateReasoning = (selectedOption) => {
    // Generate reasoning based on mood and criteria
    let reasoningText = '';
    
    const confidenceLevel = mood === 'confident' ? 'confidently' : 
                           mood === 'cautious' ? 'carefully' : 'thoughtfully';
    
    const intro = `I ${confidenceLevel} chose "${selectedOption}" because `;
    
    if (criteria.length > 0) {
      // Use criteria to generate reasoning
      const randomCriteria = criteria[Math.floor(Math.random() * criteria.length)];
      const phrases = [
        `it best satisfies the "${randomCriteria}" factor.`,
        `when considering "${randomCriteria}", this option stands out.`,
        `based on "${randomCriteria}", this is the optimal choice.`
      ];
      reasoningText = intro + phrases[Math.floor(Math.random() * phrases.length)];
    } else {
      // Generic reasoning without criteria
      const phrases = [
        `it aligns with your current needs.`,
        `it provides the best balance of benefits.`,
        `it presents the most interesting opportunity.`,
        `sometimes the unexpected choice leads to the best outcomes.`,
        `it feels right for your situation right now.`
      ];
      reasoningText = intro + phrases[Math.floor(Math.random() * phrases.length)];
    }
    
    return reasoningText;
  };

  const makeDecision = () => {
    if (options.length < 2) {
      alert('Please add at least two options!');
      return;
    }
    
    setLoading(true);
    
    // Simulate "thinking" time
    setTimeout(() => {
      const selectedOption = options[Math.floor(Math.random() * options.length)];
      const generatedReasoning = generateReasoning(selectedOption);
      
      setResult(selectedOption);
      setReasoning(generatedReasoning);
      
      // Add to history
      const newDecision = {
        date: new Date().toLocaleString(),
        options: [...options],
        result: selectedOption,
        reasoning: generatedReasoning,
        mood: mood,
        criteria: [...criteria]
      };
      
      const updatedHistory = [newDecision, ...decisionHistory].slice(0, 20);
      setDecisionHistory(updatedHistory);
      localStorage.setItem('decisionHistory', JSON.stringify(updatedHistory));
      
      setLoading(false);
    }, 1500);
  };

  const saveDecision = () => {
    if (!result) return;
    
    const newSavedDecision = {
      id: Date.now(),
      date: new Date().toLocaleString(),
      options: [...options],
      result: result,
      reasoning: reasoning
    };
    
    const updatedSavedDecisions = [newSavedDecision, ...savedDecisions];
    setSavedDecisions(updatedSavedDecisions);
    localStorage.setItem('savedDecisions', JSON.stringify(updatedSavedDecisions));
  };

  const clearForm = () => {
    setOptions([]);
    setResult(null);
    setReasoning('');
    setCriteria([]);
    setMood('neutral');
  };

  return (
    <div className="max-w-md mx-auto p-4 bg-gray-50 min-h-screen">
      <h1 className="text-2xl font-bold text-center mb-6">Decision Helper</h1>
      
      {/* Mood Selector */}
      <div className="mb-6">
        <h2 className="text-lg font-semibold mb-2">Decision Mood</h2>
        <div className="flex justify-between">
          <button 
            className={`px-4 py-2 rounded ${mood === 'cautious' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
            onClick={() => setMood('cautious')}
          >
            Cautious
          </button>
          <button 
            className={`px-4 py-2 rounded ${mood === 'neutral' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
            onClick={() => setMood('neutral')}
          >
            Neutral
          </button>
          <button 
            className={`px-4 py-2 rounded ${mood === 'confident' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
            onClick={() => setMood('confident')}
          >
            Confident
          </button>
        </div>
      </div>
      
      {/* Options */}
      <div className="mb-6">
        <h2 className="text-lg font-semibold mb-2">Your Options</h2>
        <div className="flex mb-2">
          <input
            type="text"
            value={newOption}
            onChange={(e) => setNewOption(e.target.value)}
            className="flex-grow p-2 border rounded-l"
            placeholder="Add an option..."
          />
          <button 
            onClick={addOption}
            className="bg-green-500 text-white px-4 rounded-r"
          >
            Add
          </button>
        </div>
        
        <ul className="bg-white rounded p-2 border">
          {options.length === 0 ? (
            <li className="text-gray-400 p-2">No options added yet...</li>
          ) : (
            options.map((option, index) => (
              <li key={index} className="flex justify-between items-center p-2 border-b last:border-b-0">
                <span>{option}</span>
                <button 
                  onClick={() => removeOption(index)}
                  className="text-red-500"
                >
                  ✕
                </button>
              </li>
            ))
          )}
        </ul>
      </div>
      
      {/* Criteria */}
      <div className="mb-6">
        <h2 className="text-lg font-semibold mb-2">Decision Criteria (Optional)</h2>
        <div className="flex mb-2">
          <input
            type="text"
            value={newCriterion}
            onChange={(e) => setNewCriterion(e.target.value)}
            className="flex-grow p-2 border rounded-l"
            placeholder="Add a criterion..."
          />
          <button 
            onClick={addCriterion}
            className="bg-purple-500 text-white px-4 rounded-r"
          >
            Add
          </button>
        </div>
        
        <ul className="bg-white rounded p-2 border">
          {criteria.length === 0 ? (
            <li className="text-gray-400 p-2">No criteria added yet...</li>
          ) : (
            criteria.map((criterion, index) => (
              <li key={index} className="flex justify-between items-center p-2 border-b last:border-b-0">
                <span>{criterion}</span>
                <button 
                  onClick={() => removeCriterion(index)}
                  className="text-red-500"
                >
                  ✕
                </button>
              </li>
            ))
          )}
        </ul>
      </div>
      
      {/* Decision Buttons */}
      <div className="flex justify-between mb-6">
        <button 
          onClick={makeDecision}
          className="bg-blue-600 text-white px-6 py-2 rounded-lg font-bold"
          disabled={loading}
        >
          {loading ? 'Deciding...' : 'Make Decision'}
        </button>
        <button 
          onClick={clearForm}
          className="bg-gray-300 px-6 py-2 rounded-lg"
        >
          Clear All
        </button>
      </div>
      
      {/* Result */}
      {result && (
        <div className="bg-white p-4 rounded-lg border-2 border-blue-500 mb-6">
          <h2 className="text-xl font-bold mb-2 text-center">Decision Made!</h2>
          <div className="text-2xl text-center font-bold mb-3 text-blue-600">{result}</div>
          <p className="italic text-gray-600">{reasoning}</p>
          <button 
            onClick={saveDecision}
            className="mt-4 bg-yellow-500 text-white px-4 py-2 rounded w-full"
          >
            Save This Decision
          </button>
        </div>
      )}
      
      {/* History and Saved Tabs */}
      <div className="mt-8">
        <h2 className="text-lg font-semibold mb-2">Decision History</h2>
        <div className="bg-white rounded border p-2 max-h-64 overflow-y-auto">
          {decisionHistory.length === 0 ? (
            <p className="text-gray-400 p-2">No decisions made yet...</p>
          ) : (
            decisionHistory.map((decision, index) => (
              <div key={index} className="border-b last:border-b-0 p-2">
                <div className="flex justify-between">
                  <span className="font-semibold">{decision.result}</span>
                  <span className="text-xs text-gray-500">{decision.date}</span>
                </div>
                <p className="text-sm text-gray-600">{decision.reasoning}</p>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default DecisionHelper;
